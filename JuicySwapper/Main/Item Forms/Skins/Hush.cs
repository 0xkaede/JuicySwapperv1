using JuicySwapper.Properties;
using System;
using System.Diagnostics;
using System.Windows.Forms;
using JuicySwapper.IO;
using System.IO;

namespace JuicySwapper.Main.GUI
{
    public partial class Hush : Form
    {
        public Hush()
        {
            InitializeComponent();
            this.ActiveControl = label1;
        }

        private void closeButton_Click(object sender, EventArgs e)
        {
            Close();
        }

        string PakFolder = Properties.Settings.Default.pakPath;

        private void convertButton_Click(object sender, EventArgs e)
        {
            string filePath9 = Settings.Default.pakPath + "\\pakchunk10_s9-WindowsClient.pak";

            if (!File.Exists(filePath9))
            {
                PakError a = new PakError(); a.ShowDialog();
                return;
            }

            else
            {
                CheckForIllegalCrossThreadCalls = false; int offsetskin1 = Settings.Default.offsetskin1; int offsetpick = Settings.Default.offsetpick; int offsetback = Settings.Default.offsetback; int offsetskin2 = Settings.Default.offsetskin2; int offsetemote = Settings.Default.offsetemote; int offsetlobby = Settings.Default.offsetlobby; int offsetpickmesh = Settings.Default.offsetpickmesh;
                backgroundWorker1.RunWorkerAsync();
            }
        }

        private void Placeholder_Load(object sender, EventArgs e)
        {
            if (Properties.Settings.Default.HushEnabled == true)
            {
                convertButton.Text = "Revert";
            }
            else
            {
                convertButton.Text = "Convert";
            }
        }

        private void backgroundWorker1_DoWork(object sender, System.ComponentModel.DoWorkEventArgs e)
        {
			Control.CheckForIllegalCrossThreadCalls = false;
			int offsetskin = Settings.Default.offsetskin1;
			int offsetback = Settings.Default.offsetback;
			int offsetskin2 = Settings.Default.offsetskin2;
			int offsetlobby = Settings.Default.offsetlobby;


			Stopwatch stopwatch = new Stopwatch();
            stopwatch.Start();
            string bodypath = Settings.Default.pakPath + Settings.Default.bodypathAPI;
            string headpath = Settings.Default.pakPath + Settings.Default.headpathAPI;
            string pickaxepath = Settings.Default.pakPath + Settings.Default.pickaxepathAPI;
            string pickaxesoundpath = Settings.Default.pakPath + Settings.Default.pickaxesoundpathAPI;
            string backblingpath = Settings.Default.pakPath + Settings.Default.backblingpathAPI;
            string emotespath = Settings.Default.pakPath + Settings.Default.emotespathAPI;
            if (convertButton.Text == "Convert")
            {
                RichTextBoxInfo.Clear();
                RichTextBoxInfo.Text += "[LOG] Starting...";

				Stream stream = File.OpenRead(bodypath);
				foreach (long numb in Researcher.FindPosition(stream, 0, (long)offsetskin, Hush.Body))
				{
					stream.Close();
					BinaryWriter binaryWriter = new BinaryWriter(File.Open(bodypath, FileMode.Open, FileAccess.ReadWrite));
					binaryWriter.BaseStream.Seek(numb, SeekOrigin.Begin);
					binaryWriter.Write(Hush.Body1);
					long offset = numb + 666L;
					binaryWriter.BaseStream.Seek(offset, SeekOrigin.Begin);
					binaryWriter.Write(Hush.CID1);
					binaryWriter.Close();
					RichTextBox richTextBoxInfo2 = this.RichTextBoxInfo;
					richTextBoxInfo2.Text += "\n[LOG] Body 1/2 added!";
				}
				Stream stream2 = File.OpenRead(bodypath);
				foreach (long offset2 in Researcher.FindPosition(stream2, 0, (long)offsetskin, Hush.BodyPart))
				{
					stream2.Close();
					Settings.Default.HushEnabled = true;
					Settings.Default.Save();
					BinaryWriter binaryWriter2 = new BinaryWriter(File.Open(bodypath, FileMode.Open, FileAccess.ReadWrite));
					binaryWriter2.BaseStream.Seek(offset2, SeekOrigin.Begin);
					binaryWriter2.Write(Hush.BodyPart1);
					binaryWriter2.Close();
					this.RichTextBoxInfo.Text = this.RichTextBoxInfo.Text + "\n[LOG] Body 2/2 added!";
				}
				Stream stream3 = File.OpenRead(headpath);
				foreach (long offset3 in Researcher.FindPosition(stream3, 0, (long)offsetskin2, Hush.FaceAcc))
				{
					stream3.Close();
					BinaryWriter binaryWriter3 = new BinaryWriter(File.Open(headpath, FileMode.Open, FileAccess.ReadWrite));
					binaryWriter3.BaseStream.Seek(offset3, SeekOrigin.Begin);
					binaryWriter3.Write(Hush.FaceAcc1);
					binaryWriter3.Close();
					this.RichTextBoxInfo.Text = this.RichTextBoxInfo.Text + "\n[LOG] Head added!";
				}
				Stream stream4 = File.OpenRead(headpath);
				foreach (long offset4 in Researcher.FindPosition(stream4, 0, (long)offsetskin2, Hush.FaceAccBP))
				{
					stream4.Close();
					BinaryWriter binaryWriter4 = new BinaryWriter(File.Open(headpath, FileMode.Open, FileAccess.ReadWrite));
					binaryWriter4.BaseStream.Seek(offset4, SeekOrigin.Begin);
					binaryWriter4.Write(Hush.FaceAccBP1);
					binaryWriter4.Close();
					this.RichTextBoxInfo.Text = this.RichTextBoxInfo.Text + "\n[LOG] Special Face added!";
				}

                convertButton.Text = "Revert";
                stopwatch.Stop();
                double num = (double)stopwatch.Elapsed.Milliseconds;
                RichTextBoxInfo.AppendText("\n[LOG] Done! Converted in " + num + " ms.");
            }
            else
            {
                RichTextBoxInfo.Clear();
                RichTextBoxInfo.Text += "[LOG] Starting...";

				Stream stream = File.OpenRead(bodypath);
				foreach (long numb in Researcher.FindPosition(stream, 0, (long)offsetskin, Hush.Body1))
				{
					stream.Close();
					BinaryWriter binaryWriter = new BinaryWriter(File.Open(bodypath, FileMode.Open, FileAccess.ReadWrite));
					binaryWriter.BaseStream.Seek(numb, SeekOrigin.Begin);
					binaryWriter.Write(Hush.Body);
					long offset = numb + 666L;
					binaryWriter.BaseStream.Seek(offset, SeekOrigin.Begin);
					binaryWriter.Write(Hush.CID);
					binaryWriter.Close();
					RichTextBox richTextBoxInfo2 = this.RichTextBoxInfo;
					richTextBoxInfo2.Text += "\n[LOG] Body 1/2 removed!";
				}
				Stream stream2 = File.OpenRead(bodypath);
				foreach (long offset2 in Researcher.FindPosition(stream2, 0, (long)offsetskin, Hush.BodyPart1))
				{
					stream2.Close();
					Settings.Default.HushEnabled = false;
					Settings.Default.Save();
					BinaryWriter binaryWriter2 = new BinaryWriter(File.Open(bodypath, FileMode.Open, FileAccess.ReadWrite));
					binaryWriter2.BaseStream.Seek(offset2, SeekOrigin.Begin);
					binaryWriter2.Write(Hush.BodyPart);
					binaryWriter2.Close();
					this.RichTextBoxInfo.Text = this.RichTextBoxInfo.Text + "\n[LOG] Body 2/2 removed!";
				}
				Stream stream3 = File.OpenRead(headpath);
				foreach (long offset3 in Researcher.FindPosition(stream3, 0, (long)offsetskin2, Hush.FaceAcc1))
				{
					stream3.Close();
					BinaryWriter binaryWriter3 = new BinaryWriter(File.Open(headpath, FileMode.Open, FileAccess.ReadWrite));
					binaryWriter3.BaseStream.Seek(offset3, SeekOrigin.Begin);
					binaryWriter3.Write(Hush.FaceAcc);
					binaryWriter3.Close();
					this.RichTextBoxInfo.Text = this.RichTextBoxInfo.Text + "\n[LOG] Head removed!";
				}
				Stream stream4 = File.OpenRead(headpath);
				foreach (long offset4 in Researcher.FindPosition(stream4, 0, (long)offsetskin2, Hush.FaceAccBP1))
				{
					stream4.Close();
					BinaryWriter binaryWriter4 = new BinaryWriter(File.Open(headpath, FileMode.Open, FileAccess.ReadWrite));
					binaryWriter4.BaseStream.Seek(offset4, SeekOrigin.Begin);
					binaryWriter4.Write(Hush.FaceAccBP);
					binaryWriter4.Close();
					this.RichTextBoxInfo.Text = this.RichTextBoxInfo.Text + "\n[LOG] Special Face removed!";
				}

                convertButton.Text = "Convert";
                stopwatch.Stop();
                double num = (double)stopwatch.Elapsed.Milliseconds;
                RichTextBoxInfo.AppendText("\n[LOG] Done! Reverted in " + num + " ms.");

            }
        }

		private static byte[] Body = new byte[]
		{
			47,
			71,
			97,
			109,
			101,
			47,
			67,
			104,
			97,
			114,
			97,
			99,
			116,
			101,
			114,
			115,
			47,
			80,
			108,
			97,
			121,
			101,
			114,
			47,
			70,
			101,
			109,
			97,
			108,
			101,
			47,
			77,
			101,
			100,
			105,
			117,
			109,
			47,
			66,
			111,
			100,
			105,
			101,
			115,
			47,
			70,
			95,
			77,
			69,
			68,
			95,
			71,
			114,
			97,
			102,
			102,
			105,
			116,
			105,
			95,
			82,
			101,
			109,
			105,
			120,
			47,
			77,
			101,
			115,
			104,
			101,
			115,
			47,
			70,
			95,
			77,
			69,
			68,
			95,
			71,
			114,
			97,
			102,
			102,
			105,
			116,
			105,
			95,
			82,
			101,
			109,
			105,
			120,
			95,
			84,
			49,
			46,
			70,
			95,
			77,
			69,
			68,
			95,
			71,
			114,
			97,
			102,
			102,
			105,
			116,
			105,
			95,
			82,
			101,
			109,
			105,
			120,
			95,
			84,
			49
		};

		private static byte[] Body1 = new byte[]
		{
			47,
			71,
			97,
			109,
			101,
			47,
			67,
			104,
			97,
			114,
			97,
			99,
			116,
			101,
			114,
			115,
			47,
			80,
			108,
			97,
			121,
			101,
			114,
			47,
			70,
			101,
			109,
			97,
			108,
			101,
			47,
			77,
			101,
			100,
			105,
			117,
			109,
			47,
			66,
			111,
			100,
			105,
			101,
			115,
			47,
			70,
			95,
			77,
			69,
			68,
			95,
			67,
			97,
			118,
			97,
			108,
			114,
			121,
			66,
			97,
			110,
			100,
			105,
			116,
			47,
			77,
			101,
			115,
			104,
			101,
			115,
			47,
			70,
			95,
			77,
			69,
			68,
			95,
			67,
			97,
			118,
			97,
			108,
			114,
			121,
			95,
			66,
			97,
			110,
			100,
			105,
			116,
			46,
			70,
			95,
			77,
			69,
			68,
			95,
			67,
			97,
			118,
			97,
			108,
			114,
			121,
			95,
			66,
			97,
			110,
			100,
			105,
			116,
			0,
			0,
			0,
			0,
			0,
			0,
			0
		};

		private static byte[] BodyPart = new byte[]
		{
			47,
			71,
			97,
			109,
			101,
			47,
			67,
			104,
			97,
			114,
			97,
			99,
			116,
			101,
			114,
			115,
			47,
			80,
			108,
			97,
			121,
			101,
			114,
			47,
			70,
			101,
			109,
			97,
			108,
			101,
			47,
			77,
			101,
			100,
			105,
			117,
			109,
			47,
			66,
			111,
			100,
			105,
			101,
			115,
			47,
			70,
			95,
			77,
			69,
			68,
			95,
			71,
			114,
			97,
			102,
			102,
			105,
			116,
			105,
			95,
			82,
			101,
			109,
			105,
			120,
			47,
			77,
			101,
			115,
			104,
			101,
			115,
			47,
			70,
			95,
			77,
			69,
			68,
			95,
			71,
			114,
			97,
			102,
			102,
			105,
			116,
			105,
			95,
			82,
			101,
			109,
			105,
			120,
			95,
			65,
			110,
			105,
			109,
			66,
			80,
			46,
			70,
			95,
			77,
			69,
			68,
			95,
			71,
			114,
			97,
			102,
			102,
			105,
			116,
			105,
			95,
			82,
			101,
			109,
			105,
			120,
			95,
			65,
			110,
			105,
			109,
			66,
			80,
			95,
			67
		};

		private static byte[] BodyPart1 = new byte[]
		{
			47,
			71,
			97,
			109,
			101,
			47,
			67,
			104,
			97,
			114,
			97,
			99,
			116,
			101,
			114,
			115,
			47,
			80,
			108,
			97,
			121,
			101,
			114,
			47,
			70,
			101,
			109,
			97,
			108,
			101,
			47,
			77,
			101,
			100,
			105,
			117,
			109,
			47,
			66,
			111,
			100,
			105,
			101,
			115,
			47,
			70,
			95,
			77,
			69,
			68,
			95,
			67,
			97,
			118,
			97,
			108,
			114,
			121,
			66,
			97,
			110,
			100,
			105,
			116,
			47,
			77,
			101,
			115,
			104,
			101,
			115,
			47,
			70,
			95,
			77,
			69,
			68,
			95,
			67,
			97,
			118,
			97,
			108,
			114,
			121,
			95,
			66,
			97,
			110,
			100,
			105,
			116,
			95,
			65,
			110,
			105,
			109,
			66,
			80,
			46,
			70,
			95,
			77,
			69,
			68,
			95,
			67,
			97,
			118,
			97,
			108,
			114,
			121,
			95,
			66,
			97,
			110,
			100,
			105,
			116,
			95,
			65,
			110,
			105,
			109,
			66,
			80,
			95,
			67,
			0
		};

		private static byte[] FaceAcc = new byte[]
		{
			47,
			71,
			97,
			109,
			101,
			47,
			67,
			104,
			97,
			114,
			97,
			99,
			116,
			101,
			114,
			115,
			47,
			80,
			108,
			97,
			121,
			101,
			114,
			47,
			70,
			101,
			109,
			97,
			108,
			101,
			47,
			77,
			101,
			100,
			105,
			117,
			109,
			47,
			66,
			111,
			100,
			105,
			101,
			115,
			47,
			70,
			95,
			77,
			69,
			68,
			95,
			71,
			114,
			97,
			102,
			102,
			105,
			116,
			105,
			95,
			82,
			101,
			109,
			105,
			120,
			47,
			77,
			101,
			115,
			104,
			101,
			115,
			47,
			80,
			97,
			114,
			116,
			115,
			47,
			70,
			95,
			77,
			69,
			68,
			95,
			71,
			114,
			97,
			102,
			102,
			105,
			116,
			105,
			95,
			82,
			101,
			109,
			105,
			120,
			95,
			84,
			49,
			95,
			70,
			97,
			99,
			101,
			65,
			99,
			99,
			46,
			70,
			95,
			77,
			69,
			68,
			95,
			71,
			114,
			97,
			102,
			102,
			105,
			116,
			105,
			95,
			82,
			101,
			109,
			105,
			120,
			95,
			84,
			49,
			95,
			70,
			97,
			99,
			101,
			65,
			99,
			99
		};

		private static byte[] FaceAcc1 = new byte[]
		{
			47,
			71,
			97,
			109,
			101,
			47,
			67,
			104,
			97,
			114,
			97,
			99,
			116,
			101,
			114,
			115,
			47,
			80,
			108,
			97,
			121,
			101,
			114,
			47,
			70,
			101,
			109,
			97,
			108,
			101,
			47,
			77,
			101,
			100,
			105,
			117,
			109,
			47,
			66,
			111,
			100,
			105,
			101,
			115,
			47,
			70,
			95,
			77,
			69,
			68,
			95,
			67,
			97,
			118,
			97,
			108,
			114,
			121,
			66,
			97,
			110,
			100,
			105,
			116,
			47,
			77,
			101,
			115,
			104,
			101,
			115,
			47,
			80,
			97,
			114,
			116,
			115,
			47,
			70,
			95,
			77,
			69,
			68,
			95,
			67,
			97,
			118,
			97,
			108,
			114,
			121,
			95,
			66,
			97,
			110,
			100,
			105,
			116,
			95,
			70,
			97,
			99,
			101,
			65,
			99,
			99,
			46,
			70,
			95,
			77,
			69,
			68,
			95,
			67,
			97,
			118,
			97,
			108,
			114,
			121,
			95,
			66,
			97,
			110,
			100,
			105,
			116,
			95,
			70,
			97,
			99,
			101,
			65,
			99,
			99,
			0,
			0,
			0,
			0,
			0,
			0,
			0
		};

		private static byte[] FaceAccBP = new byte[]
		{
			47,
			71,
			97,
			109,
			101,
			47,
			67,
			104,
			97,
			114,
			97,
			99,
			116,
			101,
			114,
			115,
			47,
			80,
			108,
			97,
			121,
			101,
			114,
			47,
			70,
			101,
			109,
			97,
			108,
			101,
			47,
			77,
			101,
			100,
			105,
			117,
			109,
			47,
			66,
			111,
			100,
			105,
			101,
			115,
			47,
			70,
			95,
			77,
			69,
			68,
			95,
			71,
			114,
			97,
			102,
			102,
			105,
			116,
			105,
			95,
			82,
			101,
			109,
			105,
			120,
			47,
			77,
			101,
			115,
			104,
			101,
			115,
			47,
			80,
			97,
			114,
			116,
			115,
			47,
			70,
			95,
			77,
			69,
			68,
			95,
			71,
			114,
			97,
			102,
			102,
			105,
			116,
			105,
			95,
			82,
			101,
			109,
			105,
			120,
			95,
			70,
			97,
			99,
			101,
			65,
			99,
			99,
			95,
			65,
			110,
			105,
			109,
			66,
			80,
			46,
			70,
			95,
			77,
			69,
			68,
			95,
			71,
			114,
			97,
			102,
			102,
			105,
			116,
			105,
			95,
			82,
			101,
			109,
			105,
			120,
			95,
			70,
			97,
			99,
			101,
			65,
			99,
			99,
			95,
			65,
			110,
			105,
			109,
			66,
			80,
			95,
			67
		};

		private static byte[] FaceAccBP1 = new byte[]
		{
			47,
			71,
			97,
			109,
			101,
			47,
			67,
			104,
			97,
			114,
			97,
			99,
			116,
			101,
			114,
			115,
			47,
			80,
			108,
			97,
			121,
			101,
			114,
			47,
			70,
			101,
			109,
			97,
			108,
			101,
			47,
			77,
			101,
			100,
			105,
			117,
			109,
			47,
			66,
			111,
			100,
			105,
			101,
			115,
			47,
			70,
			95,
			77,
			69,
			68,
			95,
			67,
			97,
			118,
			97,
			108,
			114,
			121,
			66,
			97,
			110,
			100,
			105,
			116,
			47,
			77,
			101,
			115,
			104,
			101,
			115,
			47,
			80,
			97,
			114,
			116,
			115,
			47,
			70,
			95,
			77,
			69,
			68,
			95,
			67,
			97,
			118,
			97,
			108,
			114,
			121,
			95,
			66,
			97,
			110,
			100,
			105,
			116,
			95,
			70,
			97,
			99,
			101,
			65,
			99,
			99,
			95,
			65,
			110,
			105,
			109,
			66,
			80,
			46,
			70,
			95,
			77,
			69,
			68,
			95,
			67,
			97,
			118,
			97,
			108,
			114,
			121,
			95,
			66,
			97,
			110,
			100,
			105,
			116,
			95,
			70,
			97,
			99,
			101,
			65,
			99,
			99,
			95,
			65,
			110,
			105,
			109,
			66,
			80,
			95,
			67,
			0
		};

		private static byte[] CID = new byte[]
		{
			69,
			70,
			111,
			114,
			116,
			67,
			117,
			115,
			116,
			111,
			109,
			71,
			101,
			110,
			100,
			101,
			114,
			58,
			58,
			70,
			101,
			109,
			97,
			108,
			101
		};

		private static byte[] CID1 = new byte[]
		{
			69,
			70,
			111,
			114,
			116,
			67,
			117,
			115,
			116,
			111,
			109,
			71,
			101,
			110,
			100,
			101,
			114,
			58,
			58,
			70,
			101,
			109,
			97,
			49,
			101
		};

	}
}
